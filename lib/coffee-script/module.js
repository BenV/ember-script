// Generated by CoffeeScript 1.3.3
var CoffeeScript, Compiler, Nodes, Optimiser, Parser, Preprocessor, cscodegen, escodegen, escodegenFormatDefaults, formatParserError, fs, path, pkg, uglifyjs;

fs = require('fs');

path = require('path');

formatParserError = require('./helpers').formatParserError;

Nodes = require('./nodes');

Preprocessor = require('./preprocessor').Preprocessor;

Parser = require('./parser');

Optimiser = require('./optimiser').Optimiser;

Compiler = require('./compiler').Compiler;

cscodegen = (function() {
  try {
    return require('cscodegen');
  } catch (_error) {}
})();

escodegen = (function() {
  try {
    return require('escodegen');
  } catch (_error) {}
})();

uglifyjs = (function() {
  try {
    return require('uglify-js');
  } catch (_error) {}
})();

CoffeeScript = null;

pkg = require(path.join(__dirname, '..', '..', 'package.json'));

escodegenFormatDefaults = {
  indent: {
    style: '  ',
    base: 0
  },
  renumber: true,
  hexadecimal: true,
  quotes: 'auto',
  parentheses: false
};

module.exports = {
  Compiler: Compiler,
  Optimiser: Optimiser,
  Parser: Parser,
  Preprocessor: Preprocessor,
  Nodes: Nodes,
  VERSION: pkg.version,
  parse: function(coffee, options) {
    var parsed, preprocessed, _ref;
    if (options == null) {
      options = {};
    }
    if ((_ref = options.optimise) == null) {
      options.optimise = true;
    }
    try {
      preprocessed = Preprocessor.processSync(coffee);
      parsed = Parser.parse(preprocessed);
      if (options.optimise) {
        return Optimiser.optimise(parsed);
      } else {
        return parsed;
      }
    } catch (e) {
      if (!(e instanceof Parser.SyntaxError)) {
        throw e;
      }
      throw new Error(formatParserError(preprocessed, e));
    }
  },
  compile: function(csAst, options) {
    return Compiler.compile(csAst, options);
  },
  cs: function(csAst, options) {},
  js: function(jsAst, options) {
    var _ref;
    if (options == null) {
      options = {};
    }
    if (escodegen == null) {
      throw new Error('escodegen not found: run `npm install escodegen`');
    }
    return escodegen.generate(jsAst, {
      comment: true,
      format: (_ref = options.format) != null ? _ref : escodegenFormatDefaults
    });
  },
  sourceMap: function(jsAst, name, options) {
    var _ref;
    if (name == null) {
      name = 'unknown';
    }
    if (options == null) {
      options = {};
    }
    if (escodegen == null) {
      throw new Error('escodegen not found: run `npm install escodegen`');
    }
    return escodegen.generate(jsAst.toJSON(), {
      comment: true,
      sourceMap: name,
      format: (_ref = options.format) != null ? _ref : escodegenFormatDefaults
    });
  }
};

CoffeeScript = module.exports.CoffeeScript = module.exports;

require.extensions['.coffee'] = function(module, filename) {
  var csAst, input, js, jsAst;
  input = fs.readFileSync(filename, 'utf8');
  csAst = CoffeeScript.parse(input);
  jsAst = CoffeeScript.compile(csAst);
  js = CoffeeScript.js(jsAst);
  return module._compile(js, filename);
};
